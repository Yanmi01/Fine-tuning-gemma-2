# -*- coding: utf-8 -*-
"""Fine-tuning Gemma 2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RP85l9MZ2GLa7rdr2DNh61kUxR7ihLbn
"""

### WRITE YOUR CODE TO BUILD THE DATASET HERE
''' The dataset in the jsonl file consist of series of questions asked by patients with answers provided by a doctor.
The data is colllected from conversations patients have with a doctor.'''

#Load in the json file containing the dataset into Hugging face hub.
!pip install huggingface_hub
!pip install datasets  # if not already installed
from huggingface_hub import login

login()  # This will prompt you to enter your Hugging Face token

from datasets import load_dataset

# Load the JSON file
dataset = load_dataset("Oluwadara/health_conversations")

### WRITE YOUR CODE TO FINETUNE THE MODEL HERE

!pip install datasets
!pip install transformers
!pip install accelerate
!pip install peft
!pip install bitsandbytes
!pip install trl
!pip install wandb

#Import the necessary packages
from transformers import (
    AutoModelForCausalLM,
    AutoTokenizer,
    BitsAndBytesConfig,
    TrainingArguments,
    HfArgumentParser,
    pipeline,
    pipeline,
    logging,
)
from peft import (
    LoraConfig,
    get_peft_model,
    prepare_model_for_kbit_training,
    set_peft_model_state_dict
    )
from trl import SFTTrainer, setup_chat_format
import torch, os, wandb
from datasets import load_dataset


wandb.login()
run = wandb.init(
    project='Fine-tune Gemma 2B on Medical Dataset',
    job_type="training",
    anonymous="allow"
)

# Load model directly
from transformers import AutoTokenizer, AutoModelForCausalLM
from huggingface_hub import notebook_login
notebook_login()

# QLoRA Configuration
compute_dtype = getattr(torch, "float16")
attn_implementation = "eager"

quant_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_quant_type="nf4",
    bnb_4bit_compute_dtype=compute_dtype,
    bnb_4bit_use_double_quant=True,
)

#Loading Gemma 2b from Huggging face transformer library
model = AutoModelForCausalLM.from_pretrained("google/gemma-2b",
    quantization_config = quant_config,
    device_map = 'auto',
    attn_implementation = attn_implementation
    )

#Load in the tokenizer as well
tokenizer = AutoTokenizer.from_pretrained("google/gemma-2b", trust_remote_code=True)
tokenizer.pad_token = tokenizer.eos_token
tokenizer.padding_side = "right"

model, tokenizer = setup_chat_format(model, tokenizer)

peft_params = LoraConfig(
    r=16,
    lora_alpha=32,
    lora_dropout=0.05,
    bias="none",
    task_type="CAUSAL_LM",
    target_modules=['up_proj', 'down_proj', 'gate_proj', 'k_proj', 'q_proj', 'v_proj', 'o_proj']
)
model = get_peft_model(model, peft_params)

dataset = load_dataset("Oluwadara/health_conversations", split="all")
dataset = dataset.shuffle(seed=65).select(range(1500))  #Finetune the model on only 1500 examples


def format_chat_template(row):
    row_json = [{"role": "user", "content": row["Patient"]},
               {"role": "assistant", "content": row["Doctor"]}]
    row["text"] = tokenizer.apply_chat_template(row_json, tokenize=False)
    return row

dataset = dataset.map(
    format_chat_template,
    num_proc=4,
)

# Split the dataset
split_dataset = dataset.train_test_split(test_size=0.2)  # 80% train, 20% test


new_model = "gemma-2-ai-doctor"

training_arguments = TrainingArguments(
    output_dir=new_model,
    per_device_train_batch_size=1,
    per_device_eval_batch_size=1,
    gradient_accumulation_steps=2,
    optim="paged_adamw_32bit",
    num_train_epochs=2,
    evaluation_strategy="steps",
    eval_steps=0.2,
    logging_steps=1,
    warmup_steps=100,
    logging_strategy="steps",
    learning_rate=2e-4,
    fp16=False,
    bf16=False,
    group_by_length=True,
    report_to="wandb"
)

trainer = SFTTrainer(
    model=model,
    train_dataset=split_dataset["train"],
    eval_dataset=split_dataset["test"],
    peft_config=peft_params,
    max_seq_length=512,
    dataset_text_field="text",
    tokenizer=tokenizer,
    args=training_arguments,
    packing= False,
)

trainer.train()

wandb.finish()
model.config.use_cache = True

# Save the fine-tuned model
trainer.model.save_pretrained(new_model)
trainer.model.push_to_hub(new_model, use_temp_dir=False)

#Generate outputs from our finetuned model
message = [{"role": "user",
           "content": 'I have a headache. How can you help me?'}] #the prompt

prompt = tokenizer.apply_chat_template(message, tokenize=False) #formatting to gemma 2 prompt format
inputs = tokenizer(prompt, return_tensors = 'pt', padding= True, truncation=True).to('cuda') #tokenize the prompt

outputs = model.generate(**inputs, max_length=150, num_return_sequences=1)


text = tokenizer.decode(outputs[0], skip_special_tokens=True)

print(text.split("assistant")[1])